{"ast":null,"code":"const {\n  config\n} = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n\n};\n\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n  };\n  return fetch(`${APIURL}/login`, requestOptions).form({\n    email: email,\n    password: password\n  }).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {// auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        //windows.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["/home/admin/Documents/4 курс/JS/PROJECT/JS_PROJECT/react-app/rent-a-car-react/rent-a-car-react/src/service/user.service.js"],"names":["config","require","APIURL","userService","login","email","password","console","log","requestOptions","method","headers","fetch","form","then","handleResponse","user","sessionStorage","setItem","JSON","stringify","response","status","text","data","parse","ok","indexOf","error","message","statusText","Promise","reject"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,kBAAD,CAA1B;;AAEA,MAAMC,MAAM,GAAG,2BAAf,C,CAA4C;;AAE5C,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB,CAEzB;AACA;AACA;AACA;AACA;AACA;;AAPyB,CAApB;;AAUP,SAASA,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAFY,GAAvB;AAKA,SAAOC,KAAK,CAAE,GAAEV,MAAO,QAAX,EAAoBO,cAApB,CAAL,CACJI,IADI,CACC;AACJR,IAAAA,KAAK,EAAEA,KADH;AAEJC,IAAAA,QAAQ,EAAEA;AAFN,GADD,EAKJQ,IALI,CAKCC,cALD,EAMJD,IANI,CAMEE,IAAD,IAAU;AACd;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA/B;AAEA,WAAOA,IAAP;AACD,GAXI,CAAP;AAYD;;AAED,SAASD,cAAT,CAAwBM,QAAxB,EAAkC;AAChCd,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8Ca,QAAQ,CAACC,MAAnE;AACA,SAAOD,QAAQ,CAACE,IAAT,GAAgBT,IAAhB,CAAsBS,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACF,QAAQ,CAACK,EAAd,EAAkB;AAChB,UAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,OAAX,CAAmBN,QAAQ,CAACC,MAA5B,MAAwC,CAAC,CAA7C,EAAgD,CAC9C;AACA;AACA;AACD;;AAED,YAAMM,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BR,QAAQ,CAACS,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AAED,WAAOJ,IAAP;AACD,GAdM,CAAP;AAeD;;AAED,eAAerB,WAAf","sourcesContent":["const { config } = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login,\n  //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n};\n\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n  };\n\n  return fetch(`${APIURL}/login`, requestOptions)\n    .form({\n      email: email,\n      password: password,\n    })\n    .then(handleResponse)\n    .then((user) => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      sessionStorage.setItem(\"user\", JSON.stringify(user));\n\n      return user;\n    });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        //windows.location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}