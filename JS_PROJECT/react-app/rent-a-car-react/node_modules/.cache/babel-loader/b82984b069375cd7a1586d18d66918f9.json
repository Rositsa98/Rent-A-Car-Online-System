{"ast":null,"code":"const {\n  config\n} = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login,\n  //   logout,\n  register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n  updateUser,\n  deleteUser\n}; //TODO - fix and obtain answ\n\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n  let details = {\n    email: email,\n    password: password\n  };\n  let formBody = [];\n\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  return fetch(\"http://localhost:3001/api/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n    },\n    body: formBody\n  }).then(user => {\n    localStorage.setItem(\"user\", user); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    return data;\n  });\n} //TODO - obtain result\n\n\nfunction register(user) {\n  let details = {\n    username: user.username,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    password2: user.password2,\n    email: user.email,\n    roles: \"normal - user\" //TODO\n\n  };\n  let formBody = [];\n\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  console.log(formBody);\n  return fetch(\"http://localhost:3001/api/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: formBody\n  });\n}\n\nfunction updateUser(user, id) {\n  console.log(\"Updating user \" + user);\n  let details = {\n    username: user.username,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    password2: user.password2,\n    email: user.email,\n    roles: \"normal - user\" //TODO\n\n  };\n  let formBody = [];\n\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  return fetch(\"http://localhost:3001/api/updateUser/\" + id, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n    },\n    body: formBody\n  }).then(resp => {\n    resp.json();\n    return resp;\n  });\n}\n\nfunction deleteUser(id) {\n  console.log(\"deleting user\" + id);\n  return fetch(\"http://localhost:3001/api/removeUser/\" + id, {\n    method: \"DELETE\"\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["/home/admin/Documents/4 курс/JS/PROJECT/JS_PROJECT/react-app/rent-a-car-react/rent-a-car-react/src/service/user.service.js"],"names":["config","require","APIURL","userService","login","register","updateUser","deleteUser","email","password","console","log","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","then","user","localStorage","setItem","sessionStorage","JSON","stringify","handleResponse","response","status","text","data","parse","username","firstName","lastName","password2","roles","id","resp","json"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,kBAAD,CAA1B;;AAEA,MAAMC,MAAM,GAAG,2BAAf,C,CAA4C;;AAE5C,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB;AAEzB;AACAC,EAAAA,QAHyB;AAIzB;AACA;AACA;AACA;AACAC,EAAAA,UARyB;AASzBC,EAAAA;AATyB,CAApB,C,CAYP;;AACA,SAASH,KAAT,CAAeI,KAAf,EAAsBC,QAAtB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,MAAIC,OAAO,GAAG;AACZJ,IAAAA,KAAK,EAAEA,KADK;AAEZC,IAAAA,QAAQ,EAAEA;AAFE,GAAd;AAKA,MAAII,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEA,SAAOC,KAAK,CAAC,iCAAD,EAAoC;AAC9CC,IAAAA,MAAM,EAAE,MADsC;AAE9CC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFqC;AAK9CC,IAAAA,IAAI,EAAEV;AALwC,GAApC,CAAL,CAMJW,IANI,CAMEC,IAAD,IAAU;AAChBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BF,IAA7B,EADgB,CAEhB;;AACAG,IAAAA,cAAc,CAACD,OAAf,CAAuB,MAAvB,EAA+BE,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA/B;AAEA,WAAOA,IAAP;AACD,GAZM,CAAP;AAaD;;AAED,SAASM,cAAT,CAAwBC,QAAxB,EAAkC;AAChCtB,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CqB,QAAQ,CAACC,MAAnE;AACA,SAAOD,QAAQ,CAACE,IAAT,GAAgBV,IAAhB,CAAsBU,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIL,IAAI,CAACO,KAAL,CAAWF,IAAX,CAArB;AAEA,WAAOC,IAAP;AACD,GAJM,CAAP;AAKD,C,CAED;;;AACA,SAAS9B,QAAT,CAAkBoB,IAAlB,EAAwB;AACtB,MAAIb,OAAO,GAAG;AACZyB,IAAAA,QAAQ,EAAEZ,IAAI,CAACY,QADH;AAEZ5B,IAAAA,QAAQ,EAAEgB,IAAI,CAAChB,QAFH;AAGZ6B,IAAAA,SAAS,EAAEb,IAAI,CAACa,SAHJ;AAIZC,IAAAA,QAAQ,EAAEd,IAAI,CAACc,QAJH;AAKZC,IAAAA,SAAS,EAAEf,IAAI,CAACe,SALJ;AAMZhC,IAAAA,KAAK,EAAEiB,IAAI,CAACjB,KANA;AAOZiC,IAAAA,KAAK,EAAE,eAPK,CAOY;;AAPZ,GAAd;AAUA,MAAI5B,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAEA,SAAOO,KAAK,CAAC,oCAAD,EAAuC;AACjDC,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwC;AAKjDC,IAAAA,IAAI,EAAEV;AAL2C,GAAvC,CAAZ;AAOD;;AAED,SAASP,UAAT,CAAoBmB,IAApB,EAA0BiB,EAA1B,EAA8B;AAC5BhC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBc,IAA/B;AAEA,MAAIb,OAAO,GAAG;AACZyB,IAAAA,QAAQ,EAAEZ,IAAI,CAACY,QADH;AAEZ5B,IAAAA,QAAQ,EAAEgB,IAAI,CAAChB,QAFH;AAGZ6B,IAAAA,SAAS,EAAEb,IAAI,CAACa,SAHJ;AAIZC,IAAAA,QAAQ,EAAEd,IAAI,CAACc,QAJH;AAKZC,IAAAA,SAAS,EAAEf,IAAI,CAACe,SALJ;AAMZhC,IAAAA,KAAK,EAAEiB,IAAI,CAACjB,KANA;AAOZiC,IAAAA,KAAK,EAAE,eAPK,CAOY;;AAPZ,GAAd;AAUA,MAAI5B,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEA,SAAOC,KAAK,CAAC,0CAA0CsB,EAA3C,EAA+C;AACzDrB,IAAAA,MAAM,EAAE,KADiD;AAEzDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFgD;AAKzDC,IAAAA,IAAI,EAAEV;AALmD,GAA/C,CAAL,CAMJW,IANI,CAMEmB,IAAD,IAAU;AAChBA,IAAAA,IAAI,CAACC,IAAL;AACA,WAAOD,IAAP;AACD,GATM,CAAP;AAUD;;AAED,SAASpC,UAAT,CAAoBmC,EAApB,EAAwB;AACtBhC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB+B,EAA9B;AAEA,SAAOtB,KAAK,CAAC,0CAA0CsB,EAA3C,EAA+C;AACzDrB,IAAAA,MAAM,EAAE;AADiD,GAA/C,CAAZ;AAGD;;AAED,eAAelB,WAAf","sourcesContent":["const { config } = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login,\n  //   logout,\n  register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n  updateUser,\n  deleteUser,\n};\n\n//TODO - fix and obtain answ\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n\n  let details = {\n    email: email,\n    password: password,\n  };\n\n  let formBody = [];\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n\n  return fetch(\"http://localhost:3001/api/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: formBody,\n  }).then((user) => {\n    localStorage.setItem(\"user\", user);\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n\n    return data;\n  });\n}\n\n//TODO - obtain result\nfunction register(user) {\n  let details = {\n    username: user.username,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    password2: user.password2,\n    email: user.email,\n    roles: \"normal - user\", //TODO\n  };\n\n  let formBody = [];\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n  console.log(formBody);\n\n  return fetch(\"http://localhost:3001/api/register\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: formBody,\n  });\n}\n\nfunction updateUser(user, id) {\n  console.log(\"Updating user \" + user);\n\n  let details = {\n    username: user.username,\n    password: user.password,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    password2: user.password2,\n    email: user.email,\n    roles: \"normal - user\", //TODO\n  };\n\n  let formBody = [];\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n\n  return fetch(\"http://localhost:3001/api/updateUser/\" + id, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: formBody,\n  }).then((resp) => {\n    resp.json();\n    return resp;\n  });\n}\n\nfunction deleteUser(id) {\n  console.log(\"deleting user\" + id);\n\n  return fetch(\"http://localhost:3001/api/removeUser/\" + id, {\n    method: \"DELETE\",\n  });\n}\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}