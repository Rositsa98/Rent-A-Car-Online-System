{"ast":null,"code":"import config from \"../config/config\";\nconst APIURL = config.apiUrl;\nexport const userService = {\n  login //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n\n};\n\nfunction login(username, password) {\n  console.log(\"Logging in user \");\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(`${APIURL}/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        windows.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["/home/admin/Documents/4 курс/JS/PROJECT/JS_PROJECT/react-app/rent-a-car-react/rent-a-car-react/src/service/user.service.js"],"names":["config","APIURL","apiUrl","userService","login","username","password","console","log","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","sessionStorage","setItem","response","status","text","data","parse","ok","indexOf","windows","location","reload","error","message","statusText","Promise","reject"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB,CAEzB;AACA;AACA;AACA;AACA;AACA;;AAPyB,CAApB;;AAUP,SAASA,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFY;AAGrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAET,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHe,GAAvB;AAMA,SAAOS,KAAK,CAAE,GAAEd,MAAO,qBAAX,EAAiCQ,cAAjC,CAAL,CACJO,IADI,CACCC,cADD,EAEJD,IAFI,CAEEE,IAAD,IAAU;AACd;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BP,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA/B;AAEA,WAAOA,IAAP;AACD,GAPI,CAAP;AAQD;;AAED,SAASD,cAAT,CAAwBI,QAAxB,EAAkC;AAChCd,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8Ca,QAAQ,CAACC,MAAnE;AACA,SAAOD,QAAQ,CAACE,IAAT,GAAgBP,IAAhB,CAAsBO,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIV,IAAI,CAACY,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACF,QAAQ,CAACK,EAAd,EAAkB;AAChB,UAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,OAAX,CAAmBN,QAAQ,CAACC,MAA5B,MAAwC,CAAC,CAA7C,EAAgD;AAC9C;AACA;AACAM,QAAAA,OAAO,CAACC,QAAR,CAAiBC,MAAjB,CAAwB,IAAxB;AACD;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BX,QAAQ,CAACY,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AAED,WAAOP,IAAP;AACD,GAdM,CAAP;AAeD;;AAED,eAAerB,WAAf","sourcesContent":["import config from \"../config/config\";\n\nconst APIURL = config.apiUrl;\n\nexport const userService = {\n  login,\n  //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n};\n\nfunction login(username, password) {\n  console.log(\"Logging in user \");\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ username, password }),\n  };\n\n  return fetch(`${APIURL}/users/authenticate`, requestOptions)\n    .then(handleResponse)\n    .then((user) => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      sessionStorage.setItem(\"user\", JSON.stringify(user));\n\n      return user;\n    });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        windows.location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}