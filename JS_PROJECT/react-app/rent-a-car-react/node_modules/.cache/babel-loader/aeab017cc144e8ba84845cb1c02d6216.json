{"ast":null,"code":"const {\n  config\n} = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n\n};\n\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n  let details = {\n    email: email,\n    password: password\n  };\n  let formBody = [];\n\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n\n  formBody = formBody.join(\"&\");\n  return;\n  fetch(\"https://example.com/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n    },\n    body: formBody\n  }).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    sessionStorage.setItem(\"user\", JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {// auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        //windows.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;","map":{"version":3,"sources":["/home/admin/Documents/4 курс/JS/PROJECT/JS_PROJECT/react-app/rent-a-car-react/rent-a-car-react/src/service/user.service.js"],"names":["config","require","APIURL","userService","login","email","password","console","log","details","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","then","handleResponse","user","sessionStorage","setItem","JSON","stringify","response","status","text","data","parse","ok","indexOf","error","message","statusText","Promise","reject"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,kBAAD,CAA1B;;AAEA,MAAMC,MAAM,GAAG,2BAAf,C,CAA4C;;AAE5C,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,KADyB,CAEzB;AACA;AACA;AACA;AACA;AACA;;AAPyB,CAApB;;AAUP,SAASA,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,MAAIC,OAAO,GAAG;AACZJ,IAAAA,KAAK,EAAEA,KADK;AAEZC,IAAAA,QAAQ,EAAEA;AAFE,GAAd;AAKA,MAAII,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBF,OAArB,EAA8B;AAC5B,QAAIG,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACJ,OAAO,CAACE,QAAD,CAAR,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,CAAcH,UAAU,GAAG,GAAb,GAAmBE,YAAjC;AACD;;AACDJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AAEA;AACAC,EAAAA,KAAK,CAAC,2BAAD,EAA8B;AACjCC,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwB;AAKjCC,IAAAA,IAAI,EAAEV;AAL2B,GAA9B,CAAL,CAOGW,IAPH,CAOQC,cAPR,EAQGD,IARH,CAQSE,IAAD,IAAU;AACd;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA/B;AAEA,WAAOA,IAAP;AACD,GAbH;AAcD;;AAED,SAASD,cAAT,CAAwBM,QAAxB,EAAkC;AAChCrB,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAA8CoB,QAAQ,CAACC,MAAnE;AACA,SAAOD,QAAQ,CAACE,IAAT,GAAgBT,IAAhB,CAAsBS,IAAD,IAAU;AACpC,UAAMC,IAAI,GAAGD,IAAI,IAAIJ,IAAI,CAACM,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACF,QAAQ,CAACK,EAAd,EAAkB;AAChB,UAAI,CAAC,GAAD,EAAM,GAAN,EAAWC,OAAX,CAAmBN,QAAQ,CAACC,MAA5B,MAAwC,CAAC,CAA7C,EAAgD,CAC9C;AACA;AACA;AACD;;AAED,YAAMM,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BR,QAAQ,CAACS,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AAED,WAAOJ,IAAP;AACD,GAdM,CAAP;AAeD;;AAED,eAAe5B,WAAf","sourcesContent":["const { config } = require(\"../config/config\");\n\nconst APIURL = \"http://localhost:3001/api\"; //config.apiUrl;\n\nexport const userService = {\n  login,\n  //   logout,\n  //     register,\n  //     getAll,\n  //     getById,\n  //     update,\n  //     delete: _delete\n};\n\nfunction login(email, password) {\n  console.log(\"Logging in user \");\n\n  let details = {\n    email: email,\n    password: password,\n  };\n\n  let formBody = [];\n  for (let property in details) {\n    let encodedKey = encodeURIComponent(property);\n    let encodedValue = encodeURIComponent(details[property]);\n    formBody.push(encodedKey + \"=\" + encodedValue);\n  }\n  formBody = formBody.join(\"&\");\n\n  return;\n  fetch(\"https://example.com/login\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n    },\n    body: formBody,\n  })\n    .then(handleResponse)\n    .then((user) => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      sessionStorage.setItem(\"user\", JSON.stringify(user));\n\n      return user;\n    });\n}\n\nfunction handleResponse(response) {\n  console.log(\"user.service: handleResponse: res.status=\" + response.status);\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if ([401, 403].indexOf(response.status) !== -1) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        // logout();\n        //windows.location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}